---
title: Deleting an environment (AWS account)
---

# <%= current_page.data.title %>

>Note: This process is cannot be undone. All resources in an AWS account will be deleted.

In the Modernisation Platform, we run a pipeline to create AWS accounts using the `aws_organizations_account` Terraform resource.

The `aws_organizations_account` cannot, and does not, delete AWS accounts if removed from the configuration. It attempts to move the AWS account from AWS Organizations to a standalone account, which should fail.

Therefore, there are a few things to do to delete an environment, in this order:

1. Get the AWS accounts root IAM user's email address
1. Remove the environment definition from `environments/*.json`
1. Remove the AWS account from Modernisation Platform management
1. Delete the `terraform workspace` wherever it appears
1. Delete the actual AWS account

## Getting the root IAM user's email address

You need the root IAM user's email address to delete the AWS account in the last step, so note it down.

To do this, `cd` into `terraform environments` and find the resource in the state:

- `cd terraform/environments`
- `terraform state list`

To find the email address, run:

- `terraform state show <resource reference>`

```bash
$ cd terraform/environments
$ terraform state list
$ terraform state show 'module.environments.aws_organizations_account.accounts["core-vpc-non-live-data"]'

resource "aws_organizations_account" "accounts" {
    ...
    email                      = "..." <- This will be the email address for the root IAM user
    ...
    tags                       = {
        "application"      = "modernisation-platform"
        "business-unit"    = "Platforms"
        "environment-name" = "production"
        "is-production"    = "true"
        "owner"            = "Modernisation Platform: modernisation-platform@digital.justice.gov.uk"
    }
}
```

## Removing the AWS account from Modernisation Platform management

You need to remove the resource from the Terraform state where it gets created so Terraform no longer has knowledge of it. You don't need to remove the organisational unit, as Terraform will remove those if they're not used by anything else.

To do this, `cd` into `terraform environments` and find the resource in the state:

- `cd terraform/environments`
- `terraform state list`

To remove it, run:

- `terraform state remove <resource reference>`

For example, to remove the environment for `core-vpc-non-live-data`:

```bash
$ cd terraform/environments
$ terraform state list
...
module.environments.aws_organizations_account.accounts["core-logging-production"]
module.environments.aws_organizations_account.accounts["core-network-services-production"]
module.environments.aws_organizations_account.accounts["core-sandbox-dev"]
module.environments.aws_organizations_account.accounts["core-security-production"]
module.environments.aws_organizations_account.accounts["core-shared-services-production"]
module.environments.aws_organizations_account.accounts["core-vpc-non-live-data"]
module.environments.aws_organizations_account.accounts["core-vpc-production"]
...
$ terraform state rm 'module.environments.aws_organizations_account.accounts["core-vpc-non-live-data"]'
Removed module.environments.aws_organizations_account.accounts["core-vpc-non-live-data"]
Successfully removed 1 resource instance(s).
```

## Removing the environment definition

To ensure the account isn't recreated after removing it from the `terraform state`, remove it from its `environments/*.json` file.

For example, to remove `core-vpc-non-live-data` from the `core-vpc` set of accounts:

```json
{
  "environments": [
    {
      "name": "production",
      "access": []
    },
    {
      "name": "non-live-data",
      "access": []
    }
  ],
  "tags": {
    "application": "modernisation-platform",
    "business-unit": "Platforms",
    "owner": "Modernisation Platform: modernisation-platform@digital.justice.gov.uk"
  }
}
```

should become:

```json
{
  "environments": [
    {
      "name": "production",
      "access": []
    }
  ],
  "tags": {
    "application": "modernisation-platform",
    "business-unit": "Platforms",
    "owner": "Modernisation Platform: modernisation-platform@digital.justice.gov.uk"
  }
}
```

## Find and delete the Terraform workspaces for the environment

Run `find-terraform-workspaces.sh <workspace name>` to quickly return where workspaces for an AWS account exist:

```bash
$ sh scripts/internal/find-terraform-workspace.sh
Starting a `terraform workspace` search from ./modernisation-platform

Searching for Terraform workspaces in ./terraform/environments

Workspace "core-vpc-non-live-data" doesn't exist.

You can create this workspace with the "new" subcommand.

Finished searching for Terraform workspaces in ./terraform/environments

...

Searching for Terraform workspaces in ./terraform/environments/bootstrap/delegate-access
Switched to workspace "default".
Switched to workspace "core-vpc-non-live-data".

Finished searching for Terraform workspaces in ./terraform/environments/bootstrap/delegate-access


Searching for Terraform workspaces in ./terraform/environments/bootstrap/secure-baselines
Switched to workspace "default".
Switched to workspace "core-vpc-non-live-data".

Finished searching for Terraform workspaces in ./terraform/environments/bootstrap/secure-baselines


Searching for Terraform workspaces in ./terraform/environments/bootstrap/single-sign-on
Switched to workspace "default".
Switched to workspace "core-vpc-non-live-data".

Finished searching for Terraform workspaces in ./terraform/environments/bootstrap/single-sign-on

...

Searching for Terraform workspaces in ./terraform/environments/core-vpc
Switched to workspace "default".
Switched to workspace "core-vpc-non-live-data".

Finished searching for Terraform workspaces in ./terraform/environments/core-vpc

...
```

If a workspace doesn't exist by that name, this script will return:

```bash
Searching for Terraform workspaces in ./terraform/modernisation-platform-account

Workspace "core-vpc-non-live-data" doesn't exist.

You can create this workspace with the "new" subcommand.

Finished searching for Terraform workspaces in ./terraform/modernisation-platform-account
```

If a workspace does exist, this script will return:

```bash
Searching for Terraform workspaces in ./terraform/environments/bootstrap/delegate-access
Switched to workspace "default".
Switched to workspace "core-vpc-non-live-data".

Finished searching for Terraform workspaces in ./terraform/environments/bootstrap/delegate-access
```

You need to go through all of the directories where the workspace appears and run:

```bash
terraform workspace delete -force core-vpc-non-live-data
```

>This will not delete the resources that are set up by the Terraform configuration. It will only delete the Terraform reference to the workspace. You will need to delete the AWS account properly.

## Delete the actual AWS account

>This process cannot be undone. Proceed carefully.

After following the above steps, you need to delete the actual AWS account that the environment was linked to.

Follow the [AWS documentation on closing an AWS account](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_close.html). You will need:

- access to the AWS account's root email address (_not_ the AWS Organizations root account)
