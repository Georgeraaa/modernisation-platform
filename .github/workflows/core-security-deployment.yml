---
name: core-security-deployment

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/environments/core-security/**'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_IN_AUTOMATION: true

defaults:
  run:
    shell: bash

jobs:
  core-security-deployment-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 0.14.4
          terraform_wrapper: false
 
      - name: Run terraform plan in terraform/environments/core-security
        run: |
          # Test if this is a PR or PULL event
          if [ ! -z ${{ github.event.pull_request.number }} ]
          then
          bash scripts/terraform-init.sh terraform/environments/core-security
          terraform -chdir="terraform/environments/core-security" workspace select core-security-production
          PLAN=`bash scripts/terraform-plan.sh terraform/environments/core-security | tee /dev/stderr | grep '^Plan: \|^No changes.'`
          ENCODED=`echo ${PLAN} | base64`
          bash scripts/update-pr-comments.sh ${ENCODED}
          fi
        env:
          SECRET: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}

  core-security-deployment-apply:
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/main'
    needs: [core-security-deployment-plan]
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 0.14.4
          terraform_wrapper: false

      - name: Run Terraform apply in terraform/environments/core-security
        run: |
          bash scripts/terraform-init.sh terraform/environments/core-security
          terraform -chdir="terraform/environments/core-security" workspace select core-security-production
          bash scripts/terraform-apply.sh terraform/environments/core-security